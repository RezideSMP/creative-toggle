package rezide.creativetoggle.mixin;

import net.minecraft.item.ItemStack;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.server.network.ServerPlayNetworkHandler;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.world.GameMode;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import rezide.creativetoggle.CreativeToggle;
import rezide.creativetoggle.DiscordBotManager;

import java.util.UUID;
import java.util.HashMap;
import java.util.Map;

@Mixin(ServerPlayNetworkHandler.class)
public abstract class ServerPlayNetworkHandlerCreativeLogMixin {

    @Shadow public ServerPlayerEntity player;

    // Use a map to track the last logged item for each player to debounce.
    // Key: Player UUID, Value: Pair of (ItemStack, timestamp)
    @Unique
    private static final Map<UUID, Long> lastCreativeLogTimestamp = new HashMap<>();
    @Unique
    private static final long DEBOUNCE_DELAY_MS = 100; // Adjust as needed, e.g., 100-200ms

    @Inject(method = "onCreativeInventoryAction", at = @At("HEAD"))
    private void onCreativeInventoryAction(CreativeInventoryActionC2SPacket packet, CallbackInfo ci) {
        // Ensure it's a server-side player in creative staff mode
        if (this.player.interactionManager.getGameMode() != GameMode.CREATIVE || !CreativeToggle.isPlayerInStaffMode(this.player.getUuid())) {
            return; // Not in creative staff mode, don't log
        }

        int slot = packet.slot();
        ItemStack packetStack = packet.stack(); // The item stack reported in the packet

        String playerName = this.player.getGameProfile().getName();
        String message = null;

        // --- Logic for logging meaningful creative inventory actions ---

        // Case 1: Item deleted into the trash slot (-1)
        if (slot == -1) {
            if (!packetStack.isEmpty()) { // Ensure an actual item was involved
                String itemName = packetStack.getName().getString();
                int itemCount = packetStack.getCount();
                message = String.format("🛡️ Player **%s** dropped %d x %s from creative inventory in staff mode.",
                        playerName, itemCount, itemName);
            }
        }
        // Case 2: Item acquired from creative tabs and placed into player inventory/hotbar
        // This is usually represented by a packet with a non-empty stack and a player inventory slot.
        // We'll use a debounce to prevent immediate duplicates for the same item/slot.
        else if (slot >= 0 && slot <= 44 && !packetStack.isEmpty()) { // Player inventory slots (0-44)
            // Check if this action has been logged very recently for this player and this item/slot
            UUID playerUuid = player.getUuid();
            long currentTime = System.currentTimeMillis();

            // To avoid overly complex state management for *what* was previously logged,
            // we'll just check if *any* creative acquisition was logged very recently for this player.
            // This is a simple debounce for the "add item" action.
            if (lastCreativeLogTimestamp.containsKey(playerUuid) &&
                    (currentTime - lastCreativeLogTimestamp.get(playerUuid) < DEBOUNCE_DELAY_MS)) {
                // Too soon since last creative log for this player, suppress this one.
                return;
            }

            // Update the timestamp for this player
            lastCreativeLogTimestamp.put(playerUuid, currentTime);

            String itemName = packetStack.getName().getString();
            int itemCount = packetStack.getCount();
            message = String.format("🛡️ Player **%s** took %d x %s from creative and placed into slot %d in staff mode.",
                    playerName, itemCount, itemName, slot);
        }
        // If slot is > 44, it might be a creative tab slot itself.
        // If you specifically want to log when items are taken directly from "virtual" creative tabs,
        // you might need additional logic here. However, the above case (`slot >= 0 && slot <= 44`)
        // generally covers the *outcome* of taking an item from creative (it lands in player inv).

        // Only send a message if one was generated by the specific conditions above
        if (message != null) {
            DiscordBotManager.sendMessageToChannel(CreativeToggle.getConfig().getAdminLogChannelId(), message);
        }
    }
}